// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	whisper "github.com/d-ashesss/whisper-service/whisper"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Transcribe provides a mock function with given fields: ctx, audiopath, opts
func (_m *Service) Transcribe(ctx context.Context, audiopath string, opts ...whisper.Option) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, audiopath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...whisper.Option) (string, error)); ok {
		return rf(ctx, audiopath, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...whisper.Option) string); ok {
		r0 = rf(ctx, audiopath, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...whisper.Option) error); ok {
		r1 = rf(ctx, audiopath, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
